# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import server_pb2 as server__pb2


class MafiaGameStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetUsername = channel.unary_unary(
                '/server.MafiaGame/SetUsername',
                request_serializer=server__pb2.SetUsernameRequest.SerializeToString,
                response_deserializer=server__pb2.SetUsernameResponse.FromString,
                )
        self.AssignRole = channel.unary_unary(
                '/server.MafiaGame/AssignRole',
                request_serializer=server__pb2.AssignRoleRequest.SerializeToString,
                response_deserializer=server__pb2.AssignRoleResponse.FromString,
                )
        self.Connect = channel.unary_unary(
                '/server.MafiaGame/Connect',
                request_serializer=server__pb2.ConnectRequest.SerializeToString,
                response_deserializer=server__pb2.ConnectResponse.FromString,
                )
        self.GetNotifications = channel.unary_stream(
                '/server.MafiaGame/GetNotifications',
                request_serializer=server__pb2.NotificationsRequest.SerializeToString,
                response_deserializer=server__pb2.Notification.FromString,
                )
        self.GetPlayers = channel.unary_unary(
                '/server.MafiaGame/GetPlayers',
                request_serializer=server__pb2.GetPlayersRequest.SerializeToString,
                response_deserializer=server__pb2.GetPlayersResponse.FromString,
                )
        self.CheckDay = channel.unary_unary(
                '/server.MafiaGame/CheckDay',
                request_serializer=server__pb2.CheckDayRequest.SerializeToString,
                response_deserializer=server__pb2.CheckDayResponse.FromString,
                )
        self.EndDay = channel.unary_unary(
                '/server.MafiaGame/EndDay',
                request_serializer=server__pb2.EndDayRequest.SerializeToString,
                response_deserializer=server__pb2.EndDayResponse.FromString,
                )
        self.VotePlayer = channel.unary_unary(
                '/server.MafiaGame/VotePlayer',
                request_serializer=server__pb2.VotePlayerRequest.SerializeToString,
                response_deserializer=server__pb2.EndDayResponse.FromString,
                )
        self.ExecutePlayer = channel.unary_unary(
                '/server.MafiaGame/ExecutePlayer',
                request_serializer=server__pb2.ExecutePlayerRequest.SerializeToString,
                response_deserializer=server__pb2.ExecutePlayerResponse.FromString,
                )
        self.InvestigatePlayer = channel.unary_unary(
                '/server.MafiaGame/InvestigatePlayer',
                request_serializer=server__pb2.InvestigatePlayerRequest.SerializeToString,
                response_deserializer=server__pb2.InvestigatePlayerResponse.FromString,
                )
        self.PublishData = channel.unary_unary(
                '/server.MafiaGame/PublishData',
                request_serializer=server__pb2.PublishDataRequest.SerializeToString,
                response_deserializer=server__pb2.PublishDataResponse.FromString,
                )
        self.IsGameFinished = channel.unary_unary(
                '/server.MafiaGame/IsGameFinished',
                request_serializer=server__pb2.IsGameFinishedRequest.SerializeToString,
                response_deserializer=server__pb2.IsGameFinishedResponse.FromString,
                )


class MafiaGameServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetUsername(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNotifications(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPlayers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckDay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndDay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VotePlayer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecutePlayer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InvestigatePlayer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsGameFinished(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MafiaGameServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetUsername': grpc.unary_unary_rpc_method_handler(
                    servicer.SetUsername,
                    request_deserializer=server__pb2.SetUsernameRequest.FromString,
                    response_serializer=server__pb2.SetUsernameResponse.SerializeToString,
            ),
            'AssignRole': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignRole,
                    request_deserializer=server__pb2.AssignRoleRequest.FromString,
                    response_serializer=server__pb2.AssignRoleResponse.SerializeToString,
            ),
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=server__pb2.ConnectRequest.FromString,
                    response_serializer=server__pb2.ConnectResponse.SerializeToString,
            ),
            'GetNotifications': grpc.unary_stream_rpc_method_handler(
                    servicer.GetNotifications,
                    request_deserializer=server__pb2.NotificationsRequest.FromString,
                    response_serializer=server__pb2.Notification.SerializeToString,
            ),
            'GetPlayers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPlayers,
                    request_deserializer=server__pb2.GetPlayersRequest.FromString,
                    response_serializer=server__pb2.GetPlayersResponse.SerializeToString,
            ),
            'CheckDay': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckDay,
                    request_deserializer=server__pb2.CheckDayRequest.FromString,
                    response_serializer=server__pb2.CheckDayResponse.SerializeToString,
            ),
            'EndDay': grpc.unary_unary_rpc_method_handler(
                    servicer.EndDay,
                    request_deserializer=server__pb2.EndDayRequest.FromString,
                    response_serializer=server__pb2.EndDayResponse.SerializeToString,
            ),
            'VotePlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.VotePlayer,
                    request_deserializer=server__pb2.VotePlayerRequest.FromString,
                    response_serializer=server__pb2.EndDayResponse.SerializeToString,
            ),
            'ExecutePlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecutePlayer,
                    request_deserializer=server__pb2.ExecutePlayerRequest.FromString,
                    response_serializer=server__pb2.ExecutePlayerResponse.SerializeToString,
            ),
            'InvestigatePlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.InvestigatePlayer,
                    request_deserializer=server__pb2.InvestigatePlayerRequest.FromString,
                    response_serializer=server__pb2.InvestigatePlayerResponse.SerializeToString,
            ),
            'PublishData': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishData,
                    request_deserializer=server__pb2.PublishDataRequest.FromString,
                    response_serializer=server__pb2.PublishDataResponse.SerializeToString,
            ),
            'IsGameFinished': grpc.unary_unary_rpc_method_handler(
                    servicer.IsGameFinished,
                    request_deserializer=server__pb2.IsGameFinishedRequest.FromString,
                    response_serializer=server__pb2.IsGameFinishedResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'server.MafiaGame', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MafiaGame(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetUsername(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.MafiaGame/SetUsername',
            server__pb2.SetUsernameRequest.SerializeToString,
            server__pb2.SetUsernameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AssignRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.MafiaGame/AssignRole',
            server__pb2.AssignRoleRequest.SerializeToString,
            server__pb2.AssignRoleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.MafiaGame/Connect',
            server__pb2.ConnectRequest.SerializeToString,
            server__pb2.ConnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNotifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/server.MafiaGame/GetNotifications',
            server__pb2.NotificationsRequest.SerializeToString,
            server__pb2.Notification.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPlayers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.MafiaGame/GetPlayers',
            server__pb2.GetPlayersRequest.SerializeToString,
            server__pb2.GetPlayersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckDay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.MafiaGame/CheckDay',
            server__pb2.CheckDayRequest.SerializeToString,
            server__pb2.CheckDayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EndDay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.MafiaGame/EndDay',
            server__pb2.EndDayRequest.SerializeToString,
            server__pb2.EndDayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VotePlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.MafiaGame/VotePlayer',
            server__pb2.VotePlayerRequest.SerializeToString,
            server__pb2.EndDayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecutePlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.MafiaGame/ExecutePlayer',
            server__pb2.ExecutePlayerRequest.SerializeToString,
            server__pb2.ExecutePlayerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InvestigatePlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.MafiaGame/InvestigatePlayer',
            server__pb2.InvestigatePlayerRequest.SerializeToString,
            server__pb2.InvestigatePlayerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.MafiaGame/PublishData',
            server__pb2.PublishDataRequest.SerializeToString,
            server__pb2.PublishDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsGameFinished(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.MafiaGame/IsGameFinished',
            server__pb2.IsGameFinishedRequest.SerializeToString,
            server__pb2.IsGameFinishedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
